//############### changing unix root password cherry blossom ######################3

sudo passwd root

//################### move to root user cherry blossom ########################

sudo su root 


//################ cherry blossom default username and password #####################

user: debian
pass: temppwd

user: cherry
pass: blossom

user: ubuntu
pass: temppwd
	
//###################### install set programs some cherry blossom ##############################


*********************************** expanding beagle bone blck sd card image ******************

sudo apt-get update
sudo apt-get upgrade

//expand the files system 
cd /opt/scripts/tools/
git pull
sudo ./grow_partition.sh
sudo reboot

sudo apt-get update
sudo apt-get upgrade
sudo apt-get -f install

sudo apt-get update
sudo apt-get upgrade

//=======================================================
//grow sd card size
//

sudo /opt/scripts/tools/grow_partition.sh

https://elinux.org/Beagleboard:Expanding_File_System_Partition_On_A_microSD



***************** sequence important here ****************************

sudo apt-get update
sudo apt-get upgrade 

sudo apt-get install gnome-tweak-tool

sudo apt-get install exfat-fuse exfat-utils

sudo apt-get install software-properties-common



sudo apt-get install build-essential python-dev python-setuptools python-pip python-smbus -y

sudo pip install Adafruit_BBIO

sudo apt-get update
sudo apt-get upgrade

sudo apt-get install xz-utils

sudo apt-get install samba ..................... windows file sharing 

sudo apt-get install ssh ......................... ssh telnet server
sudo apt-get install vsftpd .......................ftpserver

sudo apt-get install make
sudo apt-get install gcc
sudo apt-get install python
sudo apt-get install python3

sudo apt-get install git-core
sudo apt-get install cron ....................... task sheduler
sudo apt-get install mc		.................... midnight comander similar to norton comander/totalcommander



==== if midnight commander does not exist in the apt-get install  follow the following lines =====

nano /etc/apt/sources.list
A source.list file opens, add these lines in the file and save and exit from the file.
deb http://ftp.debian.org/debian/ stable main contrib non-free
deb http://ftp.de.debian.org/debian jessie main

then run 
sudo apt-get update
sudo apt-get upgrade
=====================================================================================================

sudo apt-get install minicom
sudo apt-get install picocom

sudo apt-get install network-manager

sudo apt-get install wput


sudo apt-get install aptitude



//################################### creating the rc.local service to use it to execute startup code

create the file if it does not exist

sudo nano -w /etc/rc.local

add the folloing in the file 

#!/bin/sh -e
#
# rc.local
#
# This script is executed at the end of each multiuser runlevel.
# Make sure that the script will "exit 0" on success or any other
# value on error.
#
# In order to enable or disable this script just change the execution
# bits.
#
# By default this script does nothing.

exit 0


Close and save the file with the above content



Create the service

nano /lib/systemd/rc.local.service
Edit the above file as necessary to invoke the different functionalities like network. Enable these only if the code needs that particular service. Disable unwanted ones to decrease boot time.

[Unit]
Description=rc.local strtup
After=syslog.target network.target
[Service]
Type=simple
ExecStart=/etc/rc.local
[Install]
WantedBy=multi-user.target


Create a symbolic link to let the device know the location of the service.

cd /etc/systemd/system/
ln /lib/systemd/rc.local.service rc.local.service

Make systemd reload the configuration file, start the service immediately (helps to see if the service is functioning properly) and 
enable the unit files specified in the command line.

systemctl daemon-reload
systemctl start rc.local.service
systemctl enable rc.local.service

Restart cherry blossom immediately to see if it runs as intended.

reboot 


################# resolve.conf ######################## optional only if no ping route can be resolved

this is your dns name you want to use to resolve adresses

echo “nameserver 8.8.8.8” > /etc/resolv.conf



invoke-rc.d hostname.sh start
invoke-rc.d networking force-reload
invoke-rc.d network-manager force-reload




#################### cloning a SD card after setup  is complete# ##################### when your ready to make a copy of your setup and want to role it out to another

find the device sunder /DEV ensure the disks are unmounted before prosessing the dd command

ls /ev will list thed devices on the pc
do this before inserting the disc and again after inserting the disc, try to find the new device name
usually this will come up as mmcblk0 

now using the root permisions do the following

sudo dd if=/dev/mmcblk0 | gzip > bbb_sd_image_clone.gz ................ this take some time so be patient

after process is complete , insert the new SD card and follow the following process

sudo gzip -dc bbb_sd_image_clone.gz | sudo dd of /dev/mmcblk1 .............mmcblk1 refers to the new sd card inserted 

again wait until proces is complete , eject the new card and test.

on different linux box 
dd if=/dev/sdi of=~/bbb_clone.img bs=1M count=4000
where sdi is the drive on the different linux box  
bs is block sizes , and count is how many blocks do you want , 1M x 4000 = 4GB size 




//====================================================================================
//controlling GPIO using echo


Controlling the GPIO with the file system
You can use the following commands to control the GPIO with the file system.

Exporting a pin:

echo 40 > /sys/class/gpio/export
Setting a pin OUTPUT:

echo out > /sys/class/gpio/gpio40/direction
Writing a pin HIGH:

echo 1 > /sys/class/gpio/gpio40/value
Writing a pin LOW:

echo 0 > /sys/class/gpio/gpio40/value
Setting a pin INPUT:

echo in > /sys/class/gpio/gpio40/direction
Reading the value from an INPUT pin (returns 1 for HIGH and 0 for LOW):

cat /sys/class/gpio/gpio40/value



//=====================================================================================
//Controlling the GPIO with BoneScript
//You can use the following BoneScript commands to control the GPIO.
//
//Loading a BoneScript module:

var b = require('bonescript');
Setting a pin OUTPUT:

b.pinMode("P9_14", b.OUTPUT);
Writing a pin HIGH:

b.digitalWrite("P9_14", b.HIGH);
Writing a pin LOW:

b.digitalWrite("P9_14", b.LOW);
Setting a pin INPUT:

b.pinMode("P8_11", b.INPUT);
Reading the value from a digital INPUT pin (returns HIGH or LOW):

b.digitalRead("P8_11");
Setting a pin for pulse-width modulation (PWM) with 50 percent duty cycle:

b.pinMode('P9_14', b.OUTPUT);
b.analogWrite('P9_14', 0.5);
Reading the value from an analog INPUT pin (returns a value between 0 and 1):

b.analogRead('P9_40');


//========================================================================================
//Controlling the GPIO with Python
//You can use the following Python commands to control the GPIO.

Importing Adafruit’s BeagleBone Input Output Library:

import Adafruit_BBIO.GPIO as GPIO
Setting a pin OUTPUT:

GPIO.setup("P9_14", GPIO.OUT)
Writing a pin HIGH:

GPIO.output("P9_14", GPIO.HIGH)
Writing a pin LOW:

GPIO.output("P9_14", GPIO.LOW)
Setting a pin INPUT:

GPIO.setup("P8_11", GPIO.IN)
Reading the value from a digital INPUT pin (returns HIGH or LOW):

GPIO.input("P8_11")
Setting a pin for PWM with 50 percent duty cycle:

import Adafruit_BBIO.PWM as PWM
PWM.start("P9_14", 50)
Setting an analog INPUT:

import Adafruit_BBIO.ADC as ADC
ADC.setup()
Reading the value from an analog INPUT pin (returns a value between 0 and 1):

analogReading = ADC.read("P9_40")



//=========================================================================== 
//adfruit gpio setup

sudo ntpdate pool.ntp.org
sudo apt-get update
sudo apt-get install build-essential python-dev python-pip python-smbus -y
git clone git://github.com/adafruit/adafruit-beaglebone-io-python.git
cd adafruit-beaglebone-io-python
sudo python setup.py install
cd ..
sudo rm -rf adafruit-beaglebone-io-python


//============================================================================ optional if required
// Sakis3g connection internet usb modem


 always recommend running package update before we start installing anything:

sudo apt-get update

sudo apt-get install ppp


wget "http://raspberry-at-home.com/files/sakis3g.tar.gz"

sudo mkdir /usr/bin/modem3g
sudo chmod 777 /usr/bin/modem3g
sudo cp sakis3g.tar.gz /usr/bin/modem3g
cd /usr/bin/modem3g
sudo tar -zxvf sakis3g.tar.gz
sudo chmod +x sakis3g

sudo ./sakis3g connect
Please select APN by using APN variable, or by enabling interactive mode.
        $ /usr/bin/modem3g/sakis3g --interactive "connect"
 
Available options are:
Internet         (Internet)
CUSTOM_APN      Custom APN...
 
Example:
        $ /usr/bin/modem3g/sakis3g APN="Internet"


When you’re done with creation of /etc/sakis3g.conf you can now run:
sudo ./sakis3g connect
sudo ./sakis3g disconnect


/usr/bin/modem3g/sakis3g --interactive "menu" "console"


//================================================================================== optional if required
// LIB QMI setup
//

apt-get install libqmi-utils

https://techship.com/faq/how-to-step-by-step-set-up-a-data-connection-over-qmi-interface-using-qmicli-and-in-kernel-driver-qmi-wwan-in-linux/

http://www.linuxfromscratch.org/blfs/view/svn/general/libqmi.html




//===================================== install mosquitto =======================================

sudo apt update

sudo nano -w /etc/apt/sources.list
Add “deb http://httpredir.debian.org/debian stretch main contrib non-free” to the bottom of the file. Write and close the file.

sudo apt-get update
sudo apt-get install mosquitto
sudo apt install mosquitto mosquitto-clients

exstra resource : 
https://thenewstack.io/off-the-shelf-hacker-mosquitto-on-the-bone/
https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-the-mosquitto-mqtt-messaging-broker-on-ubuntu-18-04



